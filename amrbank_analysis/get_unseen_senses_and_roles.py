import re
from collections import Counter

from amrbank_analysis.vulcan_pickle_builder import VulcanPickleBuilder
from find_rare_node_labels import load_corpus_from_folder
import os
import xml.etree.ElementTree as ET
from amrbank_analysis.util import get_node_by_name
import random


def main():

    all_frames = set()
    all_frame_roles = set()
    frames_path = "../../../data/Edinburgh/amr3.0/data/frames/propbank-amr-frames-xml-2018-01-25/"
    for filename in os.listdir(frames_path):
        if filename.endswith(".xml"):
            tree = ET.parse(frames_path + filename)
            root = tree.getroot()
            for predicate in root.findall("predicate"):
                for roleset in predicate:
                    if "id" in roleset.attrib:
                        # print(roleset.tag, roleset.attrib)
                        frame_name = roleset.attrib["id"].replace(".", "-").replace("_", "-")
                        all_frames.add(frame_name)
                        roles = roleset.find("roles")
                        if roles:
                            for role in roles:
                                if "n" in role.attrib.keys():
                                    role_label = ":ARG"+role.attrib["n"]
                                    all_frame_roles.add((frame_name, role_label))

    training_corpus = load_corpus_from_folder("../../../data/Edinburgh/amr3.0/data/amrs/split/training/")
    print(len(training_corpus))
    training_label_counter = Counter()
    training_label_role_counter = Counter()
    for graph in training_corpus:
        for instance in graph.instances():
            if re.match(r".*-[0-9][0-9]", instance.target):
                training_label_counter[instance.target] += 1
                for edge in graph.edges(source=instance.source):
                    if re.match(":ARG[0-9]+", edge.role):
                        training_label_role_counter[(instance.target, edge.role)] += 1

    test_corpus = load_corpus_from_folder("../../../data/Edinburgh/amr3.0/data/amrs/split/test/")
    print(len(test_corpus))
    r = random.Random(3629)  # random seed generated by random.org, to make it arbitrary but reproducible
    r.shuffle(test_corpus)

    all_frames_test = []
    frame_to_graphs_ids_test = dict()
    all_frame_roles_test = []
    hard_unseen_senses_vulcan_pickle_builder = VulcanPickleBuilder()
    unseen_roles_vulcan_pickle_builder = VulcanPickleBuilder()
    rare_roles_vulcan_pickle_builder = VulcanPickleBuilder()
    with open("../corpus/rare_roles_arg2plus.tsv", "w") as f:
        with open("../corpus/unseen_roles_arg2plus.tsv", "w") as g:
            with open("../corpus/hard_unseen_senses.tsv", "w") as h:
                for graph in test_corpus:
                    for instance in graph.instances():
                        if re.match(r".*-[0-9][0-9]", instance.target):
                            frame = instance.target
                            all_frames_test.append(frame)
                            if frame not in training_label_counter:
                                if not frame.endswith("-01") and not frame.endswith("-00"):
                                    seen_senses = [f for f in training_label_counter.keys() if f[:-3] == frame[:-3]]
                                    if len(seen_senses) > 0:
                                        hard_unseen_senses_vulcan_pickle_builder.add_graph(graph)
                                        hard_unseen_senses_vulcan_pickle_builder.add_graph_highlight([instance.source])
                                        h.write(f"{graph.metadata['id']}\t{frame}\n")
                            frame_to_graphs_ids_test.setdefault(instance.target, set()).add(graph.metadata["id"])
                            for edge in graph.edges(source=instance.source):
                                if re.match(":ARG[2-9]+", edge.role):
                                    all_frame_roles_test.append((instance.target, edge.role))
                                    if training_label_role_counter[(instance.target, edge.role)] == 0:
                                        g.write(f"{graph.metadata['id']}\t{instance.target}\t{edge.role}"
                                                f"\t{get_node_by_name(edge.target, graph).target}\n")
                                        unseen_roles_vulcan_pickle_builder.add_graph(graph)
                                        unseen_roles_vulcan_pickle_builder.add_graph_highlight([edge.source,
                                                                                                edge.target])
                                    elif training_label_role_counter[(instance.target, edge.role)] <= 5:
                                        f.write(f"{graph.metadata['id']}\t{instance.target}\t{edge.role}"
                                                f"\t{get_node_by_name(edge.target, graph).target}\n")
                                        rare_roles_vulcan_pickle_builder.add_graph(graph)
                                        rare_roles_vulcan_pickle_builder.add_graph_highlight([edge.source,
                                                                                              edge.target])

    hard_unseen_senses_vulcan_pickle_builder.save_pickle("outputs/hard_unseen_senses.pickle")
    unseen_roles_vulcan_pickle_builder.save_pickle("outputs/unseen_roles_arg2plus.pickle")
    rare_roles_vulcan_pickle_builder.save_pickle("outputs/rare_roles_arg2plus.pickle")

    frames_by_count = list(all_frames)
    frames_by_count.sort(key=lambda x: training_label_counter[x], reverse=True)
    with open("outputs/frame_counts.txt", "w") as f:
        for frame in frames_by_count:
            count = training_label_counter[frame]
            f.write(f"{str(count)}\t\t{frame}\n")

    with open("outputs/interesting_unseen_frames.txt", "w") as f:
        for frame in frames_by_count:
            count = training_label_counter[frame]
            if count == 0 and not frame.endswith("-01") and not frame.endswith("-00"):
                seen_senses = [f for f in training_label_counter.keys() if f[:-3] == frame[:-3]]
                if len(seen_senses) > 0:
                    f.write(f"{frame}\t\t(seen: {' '.join(seen_senses)})\n")
                else:
                    f.write(f"{frame}\n")

    with open("outputs/unseen_roles_of_seen_frames.txt", "w") as f:
        for role in all_frame_roles:
            role_count = training_label_role_counter[role]
            frame_count = training_label_counter[role[0]]
            if role_count == 0 and frame_count > 0:
                f.write(f"{role[1]}\t{role[0]}({frame_count})\n")

    frame_roles_by_count = list(all_frame_roles)
    frame_roles_by_count.sort(key=lambda x: training_label_role_counter[x], reverse=True)
    with open("outputs/frame_role_counts.txt", "w") as f:
        for frame_role in frame_roles_by_count:
            count = training_label_role_counter[frame_role]
            f.write(f"{str(count)}\t\t{frame_role[0]}\t\t{frame_role[1]}\n")

    with open("outputs/unseen_frames_test.txt", "w") as f:
        with open("../corpus/unseen_senses_test.tsv", "w") as g:
            for frame in all_frames_test:
                if frame not in training_label_counter:
                    f.write(f"{frame}\n")
                    if not frame.endswith("-00"):
                        for graph_id in frame_to_graphs_ids_test[frame]:
                            g.write(f"{graph_id}\t{frame}\n")

    with open("outputs/unseen_frame_roles_test.txt", "w") as f:
        for frame_role in all_frame_roles_test:
            if frame_role not in training_label_role_counter:
                f.write(f"{frame_role[0]}\t\t{frame_role[1]}\n")

    undocumented_frames = set()
    undocumented_frame_roles = set()
    for frame in training_label_counter.keys():
        if frame not in all_frames:
            undocumented_frames.add(frame)
    for frame_role in training_label_role_counter.keys():
        if frame_role not in all_frame_roles:
            undocumented_frame_roles.add(frame_role)

    with open("outputs/undocumented_frames.txt", "w") as f:
        for frame in sorted(list(undocumented_frames)):
            f.write(frame+"\n")

    with open("outputs/undocumented_frame_roles.txt", "w") as f:
        for frame_role in sorted(list(undocumented_frame_roles)):
            f.write(frame_role[0]+"\t\t"+frame_role[1]+"\n")

    #
    # with open("outputs/special_entities.txt", "w") as f:
    #     for label, counter in training_label_counter.most_common():
    #         f.write(label+f"\t\t{str(counter)}\n")


if __name__ == "__main__":
    main()
