import os
import random
from collections import Counter

from penman import load

from evaluation.util import is_opi_edge
from vulcan_pickle_builder import VulcanPickleBuilder
from util import load_corpus_from_folder


def main():
    training_corpus = load_corpus_from_folder("../../../data/Edinburgh/amr3.0/data/amrs/split/training/")
    print(len(training_corpus))
    test_corpus = load_corpus_from_folder("../../../data/Edinburgh/amr3.0/data/amrs/split/test/")
    print(len(test_corpus))

    r = random.Random(612)  # seed generated by random.org
    r.shuffle(test_corpus)

    wiki_links_from_training_set = set()
    for graph in training_corpus:
        for wiki_attribute in graph.attributes(role=":wiki"):
            wiki_links_from_training_set.add(wiki_attribute.target)

    pickle_builder = VulcanPickleBuilder()
    hard_wiki_pickle_builder = VulcanPickleBuilder()
    seen_and_or_easy_wiki_pickle_builder = VulcanPickleBuilder()
    distinct_nontrivial_wiki_links = set()
    with open("outputs/nontrivial_wiki_links_testset.txt", "w") as f:
        with open("../corpus/hard_wiki_test_data.tsv", "w") as f2:
            with open("../corpus/seen_andor_easy_wiki_test_data.tsv", "w") as f3:
                for graph in test_corpus:

                    highlighted_node_names = []
                    for wiki_attribute in graph.attributes(role=":wiki"):
                        if not wiki_attribute.target == "-":
                            if wiki_attribute.target not in wiki_links_from_training_set:
                                entity_node_name = wiki_attribute.source
                                name_node_name = graph.edges(source=entity_node_name, role=":name")[0].target
                                if not all([node.target == "name" for node in graph.instances() if node.source == name_node_name]):
                                    print([node for node in graph.instances() if node.source == name_node_name])
                                name_particles = [e.target for e in graph.attributes(source=name_node_name) if is_opi_edge(e)]
                                cleaned_wiki_link = wiki_attribute.target.lower().replace("_", "").replace("\"", "")
                                for p in name_particles:
                                    cleaned_wiki_link = cleaned_wiki_link.replace(p.lower().replace("\"", ""), "")
                                # print(name_particles)
                                # print(wiki_attribute.target)
                                # print(cleaned_wiki_link)
                                wiki_link_is_hard = len(cleaned_wiki_link) > 0
                                if wiki_link_is_hard:
                                    distinct_nontrivial_wiki_links.add(wiki_attribute.target.replace('\"', ''))
                                    f.write(wiki_attribute.target.replace('\"', '') + "\n" + str(name_particles)+"\n\n")
                                    f2.write(f"{graph.metadata['id']}\t{wiki_attribute.target}\n")
                                    highlighted_node_names.append(entity_node_name)
                                    hard_wiki_pickle_builder.add_graph(graph)
                                    hard_wiki_pickle_builder.add_graph_highlight([entity_node_name])
                                else:
                                    f3.write(f"{graph.metadata['id']}\t{wiki_attribute.target}\n")
                                    seen_and_or_easy_wiki_pickle_builder.add_graph(graph)
                                    seen_and_or_easy_wiki_pickle_builder.add_graph_highlight([entity_node_name])
                            else:
                                f3.write(f"{graph.metadata['id']}\t{wiki_attribute.target}\n")
                    if len(highlighted_node_names) > 0:
                        pickle_builder.add_graph(graph)
                        pickle_builder.add_graph_highlight(highlighted_node_names)

    print(f"Distinct nontrivial wiki links: {len(distinct_nontrivial_wiki_links)}")
    pickle_builder.save_pickle("outputs/nontrivial_wiki_links_testset.pkl")
    hard_wiki_pickle_builder.save_pickle("outputs/hard_wiki_test_data.pkl")
    seen_and_or_easy_wiki_pickle_builder.save_pickle("outputs/seen_andor_easy_wiki_test_data.pkl")


if __name__ == "__main__":
    main()
