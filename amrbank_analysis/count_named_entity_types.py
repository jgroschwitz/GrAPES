import random
from collections import Counter

from amrbank_analysis.vulcan_pickle_builder import VulcanPickleBuilder
from find_rare_node_labels import load_corpus_from_folder
from util import get_node_by_name, get_name


def main():
    training_corpus = load_corpus_from_folder("../../../data/Edinburgh/amr3.0/data/amrs/split/training/")
    print(len(training_corpus))
    test_corpus = load_corpus_from_folder("../../../data/Edinburgh/amr3.0/data/amrs/split/test/")
    print(len(test_corpus))

    r = random.Random(2140)  # seed generated by random.org
    r.shuffle(test_corpus)

    training_label_counter = Counter()
    training_wiki_links = set()
    training_names = set()

    for graph in training_corpus:
        for edge in graph.edges():
            if edge.role == ":name":
                named_node = get_node_by_name(edge.source, graph)
                training_label_counter[named_node.target] += 1
                wiki_attributes = [a for a in graph.attributes(source=named_node.source) if a.role == ":wiki"]
                if len(wiki_attributes) > 0:
                    training_wiki_links.add(wiki_attributes[0].target)
                training_names.add(get_name(edge.target, graph))

    with open("outputs/named_entity_types.txt", "w") as f:
        for label, counter in training_label_counter.most_common():
            f.write(label+f"\t\t{str(counter)}\n")

    test_label_counter = Counter()
    test_types_with_unseen_wiki_links_to_ids = dict()
    test_types_with_no_wiki_links_to_ids = dict()
    test_types_with_unseen_names = dict()

    person_count = 0
    vulcan_pickle_builder_seen = VulcanPickleBuilder()
    vulcan_pickle_builder_unseen = VulcanPickleBuilder()
    with open("../corpus/unseen_ne_types_test.tsv", "w") as f:
        with open("../corpus/seen_ne_types_test.tsv", "w") as g:
            for graph in test_corpus:
                for edge in graph.edges():
                    if edge.role == ":name":
                        named_node = [n for n in graph.instances() if n.source == edge.source][0]
                        test_label_counter[named_node.target] += 1
                        wiki_attributes = [a for a in graph.attributes(source=named_node.source) if a.role == ":wiki"]
                        if len(wiki_attributes) > 0:
                            if wiki_attributes[0].target not in training_wiki_links:
                                id_list = test_types_with_unseen_wiki_links_to_ids.setdefault(named_node.target, [])
                                id_list.append(graph.metadata["id"])
                            elif wiki_attributes[0].target == "-":
                                id_list = test_types_with_no_wiki_links_to_ids.setdefault(named_node.target, [])
                                id_list.append(graph.metadata["id"])
                        if get_name(edge.target, graph) not in training_names:
                            id_list = test_types_with_unseen_names.setdefault(named_node.target, [])
                            id_list.append(graph.metadata["id"])
                            person_count = filter_instance_and_write_to_tsv_and_vulcan(edge, f, graph, named_node,
                                                                                       person_count,
                                                                                       vulcan_pickle_builder_unseen)
                        else:
                            person_count = filter_instance_and_write_to_tsv_and_vulcan(edge, g, graph, named_node,
                                                                                       person_count,
                                                                                       vulcan_pickle_builder_seen)

    vulcan_pickle_builder_seen.save_pickle("outputs/seen_ne_types_test.pkl")
    vulcan_pickle_builder_unseen.save_pickle("outputs/unseen_ne_types_test.pkl")

    with open("outputs/named_entity_types_test.txt", "w") as f:
        for label, counter in test_label_counter.most_common():
            f.write(label+f"\t\t{str(counter)}\n")

    with open("outputs/named_entity_types_test_unseen_wiki_links.txt", "w") as f:
        sorted_keys = sorted(test_types_with_unseen_wiki_links_to_ids.keys(),
                             key=lambda x: len(test_types_with_unseen_wiki_links_to_ids[x]),
                             reverse=True)
        for label in sorted_keys:
            id_list = test_types_with_unseen_wiki_links_to_ids[label]
            f.write(label+f"({len(id_list)}):\n")
            max_len = min(10, len(id_list))
            for graph_id in id_list[:max_len]:
                f.write("\t"+graph_id+"\n")
            f.write("\n")

    with open("outputs/named_entity_types_test_no_wiki_links.txt", "w") as f:
        sorted_keys = sorted(test_types_with_no_wiki_links_to_ids.keys(),
                             key=lambda x: len(test_types_with_no_wiki_links_to_ids[x]),
                             reverse=True)
        for label in sorted_keys:
            id_list = test_types_with_no_wiki_links_to_ids[label]
            f.write(label+f"({len(id_list)}):\n")
            max_len = min(10, len(id_list))
            for graph_id in id_list[:max_len]:
                f.write("\t"+graph_id+"\n")
            f.write("\n")

    with open("outputs/named_entity_types_test_unseen_names.txt", "w") as f:
        sorted_keys = sorted(test_types_with_unseen_names.keys(),
                             key=lambda x: len(test_types_with_unseen_names[x]),
                             reverse=True)
        for label in sorted_keys:
            id_list = test_types_with_unseen_names[label]
            f.write(label+f"({len(id_list)}):\n")
            max_len = min(10, len(id_list))
            for graph_id in id_list[:max_len]:
                f.write("\t"+graph_id+"\n")
            f.write("\n")

    # TODO
    with open("outputs/named_entity_types_test_rare_names.txt", "w") as f:
        sorted_keys = sorted(test_types_with_unseen_names.keys(),
                             key=lambda x: len(test_types_with_unseen_names[x]),
                             reverse=True)
        for label in sorted_keys:
            id_list = test_types_with_unseen_names[label]
            f.write(label + f"({len(id_list)}):\n")
            max_len = min(10, len(id_list))
            for graph_id in id_list[:max_len]:
                f.write("\t" + graph_id + "\n")
            f.write("\n")


def filter_instance_and_write_to_tsv_and_vulcan(edge, g, graph, named_node, person_count, vulcan_pickle_builder: VulcanPickleBuilder):
    if named_node.target == "person":
        if person_count % 5 == 0:
            g.write(
                f"{graph.metadata['id']}\t{named_node.target}\t{get_name(edge.target, graph)}\n")
            vulcan_pickle_builder.add_graph(graph)
            vulcan_pickle_builder.add_graph_highlight([named_node.source])
        person_count += 1
    else:
        g.write(f"{graph.metadata['id']}\t{named_node.target}\t{get_name(edge.target, graph)}\n")
        vulcan_pickle_builder.add_graph(graph)
        vulcan_pickle_builder.add_graph_highlight([named_node.source])
    return person_count


if __name__ == "__main__":
    main()
