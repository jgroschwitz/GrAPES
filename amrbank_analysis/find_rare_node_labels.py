import os
from collections import Counter

from penman import load
from amrbank_analysis.vulcan_pickle_builder import VulcanPickleBuilder

import random


def main():
    training_corpus = load_corpus_from_folder("../../../data/Edinburgh/amr3.0/data/amrs/split/training/")
    print(len(training_corpus))
    test_corpus = load_corpus_from_folder("../../../data/Edinburgh/amr3.0/data/amrs/split/test/")
    print(len(test_corpus))

    r = random.Random(1580)  # random seed generated by random.org, to make it arbitrary but reproducible
    r.shuffle(test_corpus)

    training_label_counter = Counter()

    for graph in training_corpus:
        for instance in graph.instances():
            training_label_counter[instance.target] += 1

    pickle_builder = VulcanPickleBuilder()
    rare_pickle_builder = VulcanPickleBuilder()
    rare_labels = set()
    with open("outputs/unseen_node_labels.txt", "w") as f:
        with open("../corpus/unseen_node_labels_test.tsv", "w") as f2:
            with open("../corpus/rare_node_labels_test.tsv", "w") as f3:
                for graph in test_corpus:
                    highlighted_node_names = []
                    rare_highlighted_node_names = []
                    for instance in graph.instances():
                        if instance.target not in training_label_counter:
                            f.write(instance.target+"\n")
                            f2.write(f"{graph.metadata['id']}\t{instance.target}\n")
                            highlighted_node_names.append(instance.source)
                        else:
                            rare_labels.add(instance.target)
                            if training_label_counter[instance.target] <= 5:
                                f3.write(f"{graph.metadata['id']}\t{instance.target}\n")
                                rare_highlighted_node_names.append(instance.source)
                    if len(highlighted_node_names) > 0:
                        pickle_builder.add_graph(graph)
                        pickle_builder.add_graph_highlight(highlighted_node_names)
                    if len(rare_highlighted_node_names) > 0:
                        rare_pickle_builder.add_graph(graph)
                        rare_pickle_builder.add_graph_highlight(rare_highlighted_node_names)
    pickle_builder.save_pickle("outputs/unseen_node_labels.pkl")
    rare_pickle_builder.save_pickle("outputs/rare_node_labels_test.pkl")

    rare_labels = list(rare_labels)
    rare_labels.sort(key=lambda x: training_label_counter[x], reverse=True)
    with open("outputs/rare_node_labels.txt", "w") as f:
        last_count = 10
        for label in rare_labels:
            count = training_label_counter[label]
            if 0 < count < 10:
                if last_count != count:
                    f.write(f"\n\nCount = {count}\n")
                    last_count = count
                f.write(label+f"\t\t{str(count)}\n")


def load_corpus_from_folder(folder_path: str):
    corpus = []
    for file in os.listdir(folder_path):
        filename = os.fsdecode(file)
        if filename.endswith(".txt"):
            corpus.extend(load(folder_path + filename))
    return corpus


if __name__ == "__main__":
    main()
