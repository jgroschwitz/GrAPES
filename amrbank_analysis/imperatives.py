import random
import re
from collections import Counter
from find_rare_node_labels import load_corpus_from_folder
from util import get_node_by_name
from vulcan_pickle_builder import VulcanPickleBuilder


def main():
    test_corpus = load_corpus_from_folder("../../../data/Edinburgh/amr3.0/data/amrs/split/test/")
    print(len(test_corpus))

    r = random.Random(5103)  # seed generated by random.org
    r.shuffle(test_corpus)

    case_counter = Counter()

    vulcan_pickle_builder = VulcanPickleBuilder()

    with open("../corpus/imperatives.tsv", "w") as f:
        for graph in test_corpus:
            for attribute in graph.attributes(role=":mode", target="imperative"):
                vulcan_pickle_builder.add_graph(graph)
                vulcan_pickle_builder.add_graph_highlight([attribute.source])
                you_found = False
                for edge in graph.edges(source=attribute.source):
                    if get_node_by_name(edge.target, graph).target == "you":
                        you_found = True
                if you_found:
                    case_counter["with you"] += 1
                else:
                    case_counter["without you"] += 1

                predicate_label = get_node_by_name(attribute.source, graph).target
                arg0_edges = graph.edges(source=attribute.source, role=":ARG0")
                if len(arg0_edges) > 0:
                    arg0_label = get_node_by_name(arg0_edges[0].target, graph).target
                else:
                    arg0_label = "None"
                f.write(f"{graph.metadata['id']}\t{predicate_label}\t{arg0_label}\n")

    print(case_counter)
    vulcan_pickle_builder.save_pickle("outputs/imperatives.pkl")


if __name__ == "__main__":
    main()
