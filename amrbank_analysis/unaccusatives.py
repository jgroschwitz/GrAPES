import random
import re
from collections import Counter
from find_rare_node_labels import load_corpus_from_folder
from util import get_node_by_name, load_corpus_with_alignments, LEAMR_LDC_TEST_AMRS, LEAMR_ALIGNMENTS, \
    amr_utils_graph_to_penman_graph_with_all_explicit_names
from vulcan_pickle_builder import VulcanPickleBuilder
import nltk


def main():
    nltk.download('averaged_perceptron_tagger')
    test_amrs, test_alignments = load_corpus_with_alignments(LEAMR_LDC_TEST_AMRS, LEAMR_ALIGNMENTS)

    r = random.Random(5255)  # seed generated by random.org
    r.shuffle(test_amrs)

    vulcan_pickle_builder = VulcanPickleBuilder()
    label_counter = Counter()
    with open("../corpus/unaccusatives2.tsv", "w") as f:
        for amr_utils_graph in test_amrs:
            alignments = test_alignments[amr_utils_graph.id]
            sentence_pos_tags = nltk.pos_tag(amr_utils_graph.tokens)
            graph, node_map = amr_utils_graph_to_penman_graph_with_all_explicit_names(amr_utils_graph)
            for al in alignments:
                if len(al.nodes) == 1:
                    instance = get_node_by_name(node_map[al.nodes[0]], graph)
                    arg_edges = [edge.role for edge in graph.edges(source=instance.source) if edge.role.startswith(":ARG")]
                    pos_tags = [sentence_pos_tags[i][1] for i in al.tokens]
                    # if len(arg_edges) == 1 and ":ARG1" in arg_edges and any(tag.startswith("V") for tag in pos_tags):
                    if ":ARG0" not in arg_edges and ":ARG1" in arg_edges and any(tag.startswith("V") for tag in pos_tags):
                        label_counter[instance.target] += 1
                        vulcan_pickle_builder.add_graph(graph)
                        vulcan_pickle_builder.add_graph_highlight([instance.source])
                        vulcan_pickle_builder.add_sent_highlight(al.tokens)
                        predicate_label = instance.target
                        argument_label = get_node_by_name(
                            graph.edges(source=instance.source, role=":ARG1")[0].target, graph).target
                        f.write(f"{amr_utils_graph.id}\t{predicate_label}\tARG1\t{argument_label}\n")

    vulcan_pickle_builder.save_pickle("outputs/unaccusatives2.pkl")

    with open("outputs/unaccusatives.txt", "w") as f:
        for label, count in label_counter.most_common():
            f.write(f"{count}\t{label}\n")


if __name__ == '__main__':
    main()
