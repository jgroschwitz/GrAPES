import re
from collections import Counter
from find_rare_node_labels import load_corpus_from_folder
from vulcan_pickle_builder import VulcanPickleBuilder
import random

def main():

    training_corpus = load_corpus_from_folder("../../../data/Edinburgh/amr3.0/data/amrs/split/training/")
    print(len(training_corpus))
    training_label_counters = dict()

    for graph in training_corpus:
        for instance in graph.instances():
            if re.match(r".*-[0-9][0-9]", instance.target):
                lemma = instance.target[:-3]
                sense = instance.target[-2:]
                counter_here = training_label_counters.setdefault(lemma, Counter())
                counter_here[sense] += 1

    test_corpus = load_corpus_from_folder("../../../data/Edinburgh/amr3.0/data/amrs/split/test/")
    print(len(test_corpus))

    r = random.Random(7594)  # random seed generated by random.org, to make it arbitrary but reproducible
    r.shuffle(test_corpus)

    rare_test_label_counters = dict()
    common_test_label_counters = dict()
    rare_sense_counter = Counter()
    common_sense_counter = Counter()
    rare_vulcan_pickle_builder = VulcanPickleBuilder()
    common_vulcan_pickle_builder = VulcanPickleBuilder()

    with open("../corpus/rare_senses.tsv", "w") as f:
        with open("../corpus/common_senses.tsv", "w") as g:
            for graph in test_corpus:
                for instance in graph.instances():
                    if re.match(r".*-[0-9][0-9]", instance.target):
                        lemma = instance.target[:-3]
                        sense = instance.target[-2:]
                        # have seen the lemma in training, have seen sense but not more than 5 times, have seen other senses
                        if lemma in training_label_counters and 0 < training_label_counters[lemma][sense] <= 5\
                                and len(training_label_counters[lemma]) > 1:
                            counter_here = rare_test_label_counters.setdefault(lemma, Counter())
                            counter_here[sense] += 1
                            rare_sense_counter[sense] += 1
                            rare_vulcan_pickle_builder.add_graph(graph)
                            rare_vulcan_pickle_builder.add_graph_highlight([instance.source])
                            f.write(f"{graph.metadata['id']}\t{instance.target}\n")
                        if lemma in training_label_counters and training_label_counters[lemma][sense] >= 30\
                                and sum(training_label_counters[lemma].values()) > training_label_counters[lemma][sense] + 30:
                            counter_here = common_test_label_counters.setdefault(lemma, Counter())
                            counter_here[sense] += 1
                            common_sense_counter[sense] += 1
                            common_vulcan_pickle_builder.add_graph(graph)
                            common_vulcan_pickle_builder.add_graph_highlight([instance.source])
                            g.write(f"{graph.metadata['id']}\t{instance.target}\n")


    with open("outputs/rare_senses_test.txt", "w") as f:
        for lemma in rare_test_label_counters:
            f.write(f"{lemma}\n")
            for sense in rare_test_label_counters[lemma]:
                f.write(f"\t{sense}\t{training_label_counters[lemma][sense]}\t({rare_test_label_counters[lemma][sense]})\n")

    with open("outputs/common_senses_test.txt", "w") as f:
        for lemma in common_test_label_counters:
            f.write(f"{lemma}\n")
            for sense in common_test_label_counters[lemma]:
                f.write(f"\t{sense}\t{training_label_counters[lemma][sense]}\t({common_test_label_counters[lemma][sense]})\n")

    rare_vulcan_pickle_builder.save_pickle("outputs/rare_senses.pkl")
    common_vulcan_pickle_builder.save_pickle("outputs/common_senses.pkl")

    print(sum([sum([rare_test_label_counters[lemma][sense] for sense in rare_test_label_counters[lemma]]) for lemma in
               rare_test_label_counters]))
    print("Rare senses:")
    print(sum(rare_sense_counter.values()))
    print(rare_sense_counter.most_common())
    print("Common senses:")
    print(sum(common_sense_counter.values()))
    print(common_sense_counter.most_common())


if __name__ == "__main__":
    main()
